generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String     @id @default(uuid())
  email     String     @unique
  password  String
  name      String
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  role      String   @default("user")
  addresses Address[]
  orders    Order[]
  cart      Cart?
  wishlist  Wishlist?
}

model Address {
  id      String  @id @default(uuid())
  user    User?    @relation(fields: [userId], references: [id])
  userId  String?
  street  String
  city    String
  state   String
  zip     String
  country String
  orders  Order[]
}

model Collection {
  id       String    @id @default(uuid())
  name     String
  slug     String    @unique
  products Product[]
}

model Category {
  id       String    @id @default(uuid())
  name     String
  slug     String    @unique
  products Product[]
}

model Product {
  id           String           @id @default(uuid())
  name         String
  description  String
  price        Float
  collection   Collection?      @relation(fields: [collectionId], references: [id])
  collectionId String?
  category     Category?        @relation(fields: [categoryId], references: [id])
  categoryId   String?
  images       ProductImage[]
  variants     ProductVariant[]
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt
}

model ProductVariant {
  id            String         @id @default(uuid())
  product       Product        @relation(fields: [productId], references: [id])
  productId     String
  size          String
  color         String
  stock         Int
  sku           String         @unique
  cartItems     CartItem[]     // Add this relation
  orderItems    OrderItem[]    // Add this relation
  wishlistItems WishlistItem[] // Add this relation
}

model ProductImage {
  id        String   @id @default(uuid())
  product   Product  @relation(fields: [productId], references: [id])
  productId String
  url       String
  altText   String
}

model Cart {
  id        String     @id @default(uuid())
  user      User?      @relation(fields: [userId], references: [id])
  userId    String?    @unique  // Add @unique for one-to-one relation
  sessionId String?    // For guest users
  items     CartItem[]
  updatedAt DateTime   @updatedAt
}

model CartItem {
  id        String         @id @default(uuid())
  cart      Cart           @relation(fields: [cartId], references: [id])
  cartId    String
  variant   ProductVariant @relation(fields: [variantId], references: [id])
  variantId String
  quantity  Int
}

model Order {
  id           String     @id @default(uuid())
  user         User?      @relation(fields: [userId], references: [id])
  userId       String?
  guestEmail   String?    // For guest users
  orderItems   OrderItem[]
  totalAmount  Float
  status       String
  createdAt    DateTime   @default(now())
  address      Address    @relation(fields: [addressId], references: [id])
  addressId    String
  payment      Payment?
}

model OrderItem {
  id        String         @id @default(uuid())
  order     Order          @relation(fields: [orderId], references: [id])
  orderId   String
  variant   ProductVariant @relation(fields: [variantId], references: [id])
  variantId String
  quantity  Int
  price     Float
}

model Payment {
  id      String @id @default(uuid())
  order   Order  @relation(fields: [orderId], references: [id])
  orderId String @unique
  method  String
  status  String
  paidAt  DateTime?
}

model Wishlist {
  id        String         @id @default(uuid())
  user      User           @relation(fields: [userId], references: [id])
  userId    String         @unique
  items     WishlistItem[]
  createdAt DateTime       @default(now())
}

model WishlistItem {
  id         String         @id @default(uuid())
  wishlist   Wishlist       @relation(fields: [wishlistId], references: [id])
  wishlistId String
  variant    ProductVariant @relation(fields: [variantId], references: [id])
  variantId  String
  addedAt    DateTime       @default(now())
}




